/*
  ACS712 Current Sensor Calibration & Measurement
  ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° Linear & Polynomial Calibration
  ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö ACS712 ‡∏£‡∏∏‡πà‡∏ô 5A / 20A / 30A
*/

#if defined(ESP32)
  #define CURRENT_PIN 35
  const float ADC_REF = 3.3;    // ESP32 ‡πÉ‡∏ä‡πâ 3.3V
  const int ADC_MAX = 4095;     // 12-bit ADC
#else
  #define CURRENT_PIN A0
  const float ADC_REF = 5.0;    // Arduino UNO ‡πÉ‡∏ä‡πâ 5V
  const int ADC_MAX = 1023;     // 10-bit ADC
#endif

// -------------------- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå --------------------
const float SENSITIVITY = 0.185;   // ‡∏£‡∏∏‡πà‡∏ô 5A = 0.185V/A, 20A=0.100, 30A=0.066
float zeroOffset = 0;              // ‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå (‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "cal")

// -------------------- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï --------------------
// ‚öôÔ∏è Linear Calibration: y = Œ±x + Œ≤
float alpha = 1.2237;   // slope (m)
float beta  = -0.0218;   // intercept (c)

// ‚öôÔ∏è Polynomial Calibration: y = a*x¬≤ + b*x + c
float a_poly = 0.109;
float b_poly =  1.1275;
float c_poly =  -0.0065;

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("\n=== ACS712 Calibration ===");
  Serial.println("1Ô∏è‚É£ ‡∏ñ‡∏≠‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡∏Å ‚Üí ‡∏û‡∏¥‡∏°‡∏û‡πå 'cal' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏®‡∏π‡∏ô‡∏¢‡πå");
  Serial.println("2Ô∏è‚É£ ‡∏û‡∏¥‡∏°‡∏û‡πå 'run' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™ (‡∏û‡∏£‡πâ‡∏≠‡∏° Linear & Polynomial)\n");
}

void loop() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();

    if (cmd == "cal") {
      zeroOffset = calibrateZero();
      Serial.print("‚úÖ Zero Offset (V) = ");
      Serial.println(zeroOffset, 4);
      Serial.println("‡∏û‡∏¥‡∏°‡∏û‡πå 'run' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™\n");
    }

    else if (cmd == "run") {
      Serial.println("üîå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏à‡∏£‡∏¥‡∏á (Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)");
      while (true) {
        float current = readCurrent();                     // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏î‡∏¥‡∏ö
        float linear_cal = (alpha * current) + beta;       // Linear calibration
        float poly_cal   = (a_poly * current * current) + (b_poly * current) + c_poly; // Polynomial calibration

        Serial.printf("Raw Current: %.3f A | Linear: %.3f A | Poly: %.3f A\n",
                      current, linear_cal, poly_cal);
        delay(700);
      }
    }
  }
}

// -------------------- ‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏®‡∏π‡∏ô‡∏¢‡πå --------------------
float calibrateZero() {
  Serial.println("üåÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï... (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 1000 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)");
  long sum = 0;
  for (int i = 0; i < 1000; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(2);
  }
  float avg = sum / 1000.0;
  float Vout = (avg / ADC_MAX) * ADC_REF;
  return Vout;
}

// -------------------- ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏î‡∏¥‡∏ö --------------------
float readCurrent() {
  const int N = 50;
  long sum = 0;
  for (int i = 0; i < N; i++) {
    sum += analogRead(CURRENT_PIN);
    delay(2);
  }
  float avg = sum / (float)N;
  float Vout = (avg / ADC_MAX) * ADC_REF;
  float I = (Vout - zeroOffset) / SENSITIVITY;
  return I;
}
